#!/bin/sh

###############################################################################
# Utility functions
###############################################################################

log() {
  for arg
    do echo "$arg" >&2
  done
}

log_failure() {
  log "Error: Missing $2"
  return "$1"
}

require_var() {
  eval "[ -n \"\$$1\" ]" || log_failure "$?" "environment variable '$1'"
}

require_command() {
  $(type -t "$1" | grep -q "^.\+$1\$") || log_failure "$?" "command '$1'"
}

prepare_env() {
  require_var TVHEADEND_USER     || return "$?"
  require_var TVHEADEND_PASSWORD || return "$?"
  require_var TVHEADEND_HOST     || return "$?"

  TVHEADEND_HTTP_PORT="${TVHEADEND_HTTP_PORT:-9981}"
  TVHEADEND_HTTP_URL="${TVHEADEND_HTTP_URL:-http://$TVHEADEND_HOST:$TVHEADEND_HTTP_PORT}"
  TVHEADEND_HTTP_TIMEOUT="${TVHEADEND_HTTP_TIMEOUT:-15}"

  MQTT_TOPIC_PREFIX="${MQTT_TOPIC_PREFIX:-tvheadend}"

  curl_options=""
  curl_options="$curl_options --get"
  curl_options="$curl_options -s"
  curl_options="$curl_options --max-time $TVHEADEND_HTTP_TIMEOUT"
  curl_options="$curl_options --user $TVHEADEND_USER:$TVHEADEND_PASSWORD"
}

print_json() {
  echo "$1"
}


###############################################################################
# Request HTTP via cURL
###############################################################################

request() {
  curl $curl_options $*
  rc="$?"
  case "$rc" in
  0)
    return "$rc"
    ;;
  7)
    message="Failed to connect to host"
    ;;
  28)
    message="Timeout after $TVHEADEND_HTTP_TIMEOUT seconds"
    ;;
  *)
    message="cURL returned $rc"
    ;;
  esac
  log "Error: $message while trying to access $*" && return "$rc"
}


###############################################################################
# Request JSON from pre-defined Tvheadend API endpoints
###############################################################################

get_status() {
  subscriptions=$(get_subscriptions) || return "$?"
  require_command jq || return "$?"
  subscription_count=$(echo "$subscriptions" | jq -r ".totalCount")
  upcoming=$(get_upcoming 1) || return "$?"
  status=$(echo "$upcoming" | jq ".entries[0] | {next: [((.start_real-now) / 60)|floor, 0] | max, title: .disp_title, subtitle: .disp_subtitle, channel: .channelname, status: .sched_status, subscriptions: $subscription_count}")

  print_json "$status"
}

get_subscriptions() {
  subscriptions=$(request "$TVHEADEND_HTTP_URL/api/status/subscriptions") || return "$?"
  print_json "$subscriptions"
}

get_connections() {
  connections=$(request "$TVHEADEND_HTTP_URL/api/status/connections") || return "$?"
  print_json "$connections"
}

get_upcoming() {
  limit="${1:-5}"
  curl_local_options=""
  curl_local_options="$curl_local_options --data sort=start_real"
  curl_local_options="$curl_local_options --data dir=ASC"
  curl_local_options="$curl_local_options --data limit=$limit"
  upcoming=$(request $curl_local_options "$TVHEADEND_HTTP_URL/api/dvr/entry/grid_upcoming") || return "$?"
  print_json "$upcoming"
}

get_finished() {
  limit="${1:-10}"
  curl_local_options=""
  curl_local_options="$curl_local_options --data sort=start_real"
  curl_local_options="$curl_local_options --data dir=DESC"
  curl_local_options="$curl_local_options --data limit=$limit"
  finished=$(request $curl_local_options "$TVHEADEND_HTTP_URL/api/dvr/entry/grid_finished") || return "$?"
  print_json "$finished"
}


###############################################################################
# Publish and subscribe via MQTT
###############################################################################

publish() {
  log "$(date '+%Y-%m-%d %H:%M:%S') publish $*"

  require_var MQTT_BROKER_HOSTNAME || return "$?"
  require_command mosquitto_pub    || return "$?"

  [ -n "$1" ] || log_failure "$?" "argument for 'publish'" || return "$?"
  info="$1"
  shift

  command="get_$info"
  if $(type -t "$command" | grep -q "^$command\( is a shell function\)\?\$"); then
    message=$("$command" $*)
  else
    message="Error: Unsupported Tvheadend info '$info'"
    log "$message"
  fi

  mosquitto_pub -h "$MQTT_BROKER_HOSTNAME" -t "$MQTT_TOPIC_PREFIX/$info" -m "$message"
}

subscribe() {
  log "$(date '+%Y-%m-%d %H:%M:%S') subscribe"
  # '$info' must not be quoted so that arguments are handed over separately
  mosquitto_sub -h "$MQTT_BROKER_HOSTNAME" -t "$MQTT_TOPIC_PREFIX/request" | while read info; do publish $info; done
}


###############################################################################
# Prepare environment
###############################################################################

prepare_env || exit "$?"


###############################################################################
# Run arguments
###############################################################################

$*
